/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* solve(vector<int>& data, int l, int r){
        if(l>r)return nullptr;
        int mid = (l+r)/2;

        TreeNode *root = new TreeNode(data[mid]);
        root->left = solve(data, l,mid-1);
        root->right = solve(data, mid+1,r);
        return root;


    }
    void trav(TreeNode* root, vector<int>& data){
        if(root == nullptr)return;
        trav(root->left, data);
        data.push_back(root->val);
        trav(root->right, data);
    }
    TreeNode* balanceBST(TreeNode* root) {
        if(root == NULL)
        return NULL;
        vector<int> data;
        trav(root, data);
        return solve(data, 0, data.size()-1);

    }
};
